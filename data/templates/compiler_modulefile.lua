-- Copyright 2025 Vantage Compute Corporation
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- -*- lua -*-
-- Enhanced module file for Compiler tier packages
-- Generated by Spack with Core/Compiler/MPI hierarchy support
{% if spec -%}
-- {{ spec.short_spec }}
{% else -%}
-- Package information not available
{% endif -%}
--

{% if spec and spec.name -%}
whatis([[Name : {{ spec.name }}]])
{% else -%}
whatis([[Name : openmpi]])
{% endif -%}
{% if spec and spec.version -%}
whatis([[Version : {{ spec.version }}]])
{% else -%}
whatis([[Version : unknown]])
{% endif -%}
whatis([[Category : Compiler]])
whatis([[Description : OpenMPI compiled with specific compiler]])

{% if spec and spec.name -%}
help([[Name   : {{ spec.name }}]])
{% else -%}
help([[Name   : openmpi]])
{% endif -%}
{% if spec and spec.version -%}
help([[Version: {{ spec.version }}]])
{% else -%}
help([[Version: unknown]])
{% endif -%}
help([[
OpenMPI - Compiler Tier Package

This package provides OpenMPI compiled with a specific compiler. This is part
of the Compiler tier in the module hierarchy.

Module Hierarchy:
  Core -> Compiler (this level) -> MPI

Features:
- Compiled with specific GCC version for ABI compatibility
- Slurm integration for job scheduling
- Support for multiple network fabrics
- Relocatable installation

Usage:
  module load gcc-runtime         # Load runtime first
  module load openmpi              # Load OpenMPI
  mpirun -np 4 ./my_mpi_program    # Run MPI programs
  
Note: This module automatically loads required Core modules.
]])

-- Relocatable prefix logic
local prefix = "{prefix}"
{% if spec and spec.prefix -%}
local default_prefix = "{{ spec.prefix }}"
{% else -%}
local default_prefix = "/opt/slurm/view"
{% endif -%}

-- Use environment variable override if set
local install_prefix = os.getenv("SLURM_INSTALL_PREFIX")
if install_prefix then
    prefix = install_prefix
else
    prefix = default_prefix
end

-- Basic environment setup
prepend_path("PATH", pathJoin(prefix, "bin"))
prepend_path("MANPATH", pathJoin(prefix, "share/man"))
prepend_path("LD_LIBRARY_PATH", pathJoin(prefix, "lib"))

-- Development support
prepend_path("CPATH", pathJoin(prefix, "include"))
prepend_path("PKG_CONFIG_PATH", pathJoin(prefix, "lib/pkgconfig"))
prepend_path("CMAKE_PREFIX_PATH", prefix)

-- OpenMPI specific environment
setenv("OMPI_MCA_plm", "slurm")
setenv("OMPI_PREFIX", prefix)

-- Metadata for hierarchy support
{% if spec and spec.compiler -%}
setenv("OPENMPI_COMPILER", "{{ spec.compiler }}")
{% endif -%}
{% if spec and spec.target -%}
setenv("OPENMPI_TARGET", "{{ spec.target }}")
{% endif -%}

-- Module identification
{% if spec and spec.name and spec.version -%}
local version = "{{ spec.version }}"
local name = "{{ spec.name }}"
{% else -%}
local version = "unknown"
local name = "openmpi"
{% endif -%}

-- Prevent loading multiple MPI implementations
conflict("openmpi")
conflict("mpich")
conflict("intel-mpi")

-- Family support for better module management
family("mpi")

-- Auto-load dependencies in hierarchical mode
-- This is handled by Spack's autoload configuration

-- Module load/unload messages
if mode() == "load" then
    LmodMessage("Loading " .. name .. " " .. version .. " from: " .. prefix)
    LmodMessage("OpenMPI configured for Slurm job scheduler")
elseif mode() == "unload" then
    LmodMessage("Unloading " .. name .. " " .. version)
end
